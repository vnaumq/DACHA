# -*- coding: utf-8 -*-
"""Копия блокнота "Untitled2.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J9wtGuQjeklMxWJlg0mkH_Nu6pOdOl21
"""
import os
# Создаем папки, если они не существуют
os.makedirs('3/files/input_audio', exist_ok=True)
os.makedirs('3/files/output_audio', exist_ok=True)
input_path = '3/files/input_audio/audio.wav'

# Изменение частоты дискретизации:
import librosa
# Загрузка аудиофайла с сохранением исходной частоты дискретизации, где y
y, sr = librosa.load(input_path, sr=None)
# Снижение частоты дискретизации до 22050 Гц
y_resampled = librosa.resample(y, orig_sr=sr, target_sr=22050)
# Сохранение ресемплированного аудиофайла с новой частотой дискретизации
import soundfile as sf
sf.write('3/files/output_audio/resampled_audio.wav', y_resampled, sr)

# Обработка и фильтрация:
y, sr = librosa.load(input_path, sr=None)
# Применение фильтрации
y_filtered = librosa.effects.preemphasis(y)
sf.write('3/files/output_audio/filtered_audio.wav', y_filtered, sr)

# Прореживание данных (Downsampling)
import numpy as np
y, sr = librosa.load(input_path, sr=None)
# Прореживание данных, сохраняя каждую вторую выборку
y_downsampled = y[::2]
sf.write('3/files/output_audio/downsampled_audio.wav', y_downsampled, sr)

# Сжатие динамического диапазона (Dynamic Range Compression)
y, sr = librosa.load(input_path, sr=None)
# Применение эффекта перкуссии для сжатия динамического диапазона
y_compressed = librosa.effects.percussive(y)
sf.write('3/files/output_audio/compressed_dynamic_range.wav', y_compressed, sr)

# Обработка тишины (Silence Removal)
y, sr = librosa.load(input_path, sr=None)
# Найти все непустые интервалы
non_silent_intervals = librosa.effects.split(y, top_db=20)
y_non_silent = np.concatenate([y[start:end] for start, end in non_silent_intervals])
sf.write('3/files/output_audio/non_silent_audio.wav', y_non_silent, sr)

# Преобразование в моно (Convert to Mono)
y, sr = librosa.load(input_path, sr=None, mono=False)
# Преобразование в моно
y_mono = librosa.to_mono(y)
sf.write('3/files/output_audio/mono_audio.wav', y_mono, sr)

# Конвертация аудиоформатов в Pydub
from pydub import AudioSegment
sound = AudioSegment.from_file(input_path)
# Конвертация в MP3 с битрейтом 64 кбит/с
sound.export('3/files/output_audio/compressed_audio.mp3', format='mp3', bitrate='64k')
import librosa
import soundfile as sf
import os

# Загрузка начального аудиофайла
y, sr = librosa.load(input_path, sr=None)

# Ресемплирование аудиосигнала до 22050 Гц
y_resampled = librosa.resample(y, orig_sr=sr, target_sr=22050)

# Сохранение ресемплированного аудиофайла
sf.write('3/files/output_audio/resampled_audio.wav', y_resampled, 22050)

# Сжатие ресемплированного аудиофайла с помощью pydub
from pydub import AudioSegment
compressed_audio = AudioSegment.from_file('3/files/output_audio/resampled_audio.wav')
compressed_audio.export('3/files/output_audio/compressed_audio.mp3', format='mp3', bitrate='64k')

# Восстановление аудиофайла
restored_audio = AudioSegment.from_file('3/files/output_audio/compressed_audio.mp3')
restored_audio.export('3/files/output_audio/restored_audio.wav', format='wav')

# Получение размеров файлов
initial_size = os.path.getsize('3/files/input_audio/audio.wav')
resampled_size = os.path.getsize('3/files/output_audio/resampled_audio.wav')
compressed_size = os.path.getsize('3/files/output_audio/compressed_audio.mp3')
restored_size = os.path.getsize('3/files/output_audio/restored_audio.wav')

print(f'Initial file size: {initial_size / 1024:.2f} KB')
print(f'Resampled file size: {resampled_size / 1024:.2f} KB')
print(f'Compressed file size: {compressed_size / 1024:.2f} KB')
print(f'Restored file size: {restored_size / 1024:.2f} KB')